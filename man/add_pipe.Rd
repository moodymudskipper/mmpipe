% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/04_add_pipe.R
\name{add_pipe}
\alias{add_pipe}
\title{build a new pipe in one command}
\usage{
add_pipe(new_pipe, new_body)
}
\arguments{
\item{new_pipe}{A name}

\item{new_body}{A call}
}
\value{
the operator is created and *magrittr*'s namespace is modified to
  make the new operator compatible. NULL is returned.
}
\description{
The argument `new_body` will often be a `substitute` call, the variable `.`
contains the output of the previous operation while the variable body
contains the call that would be executed by a regular `%>%` pipe and modify
it to get the new behavior.
}
\examples{
# create a pipe that prints the dimensions before executing the relevant step
add_pipe(`\%dim1>\%`, substitute({print(dim(.)); . <- b; cat("\\n"); .}, list(b = body)))
iris \%dim1>\% head(2)
# create a pipe that prints the dimensions after executing the relevant step
add_pipe(`\%dim2>\%`, substitute({. <- b; print(dim(.)); cat("\\n"); .}, list(b = body)))
iris \%dim2>\% head(2)
# if we wanted to recreate existing operators
add_pipe(`\%T2>\%`, call("{", body, quote(.)))
iris \%T2>\% {message("side effect")} \%>\% head(2)
add_pipe(`\%W2>\%`, substitute(
    {options(warn = -1); on.exit(options(warn = w)); b},
    list(w = options()$warn, b = body)))
data.frame(a = c(1,-1)) \%W2>\% transform(a = sqrt(a))
add_pipe(`\%P2>\%`, substitute({. <- print(b);cat("\\n");.}, list(b = body)))
iris \%P2>\% head(3) \%>\% head(2)
}
